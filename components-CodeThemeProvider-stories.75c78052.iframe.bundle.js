"use strict";(self.webpackChunkscoobie=self.webpackChunkscoobie||[]).push([[877],{"./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/components/Stack/Stack.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>Stack});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),_utils_align_mjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/utils/align.mjs"),_Box_Box_mjs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/components/Box/Box.mjs"),_private_buildDataAttributes_mjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/components/private/buildDataAttributes.mjs");const Stack=_ref=>{let{component="div",children,space="none",align:alignProp,data,...restProps}=_ref;const align=alignProp||"left";return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_Box_Box_mjs__WEBPACK_IMPORTED_MODULE_1__.a,{component,display:"flex",flexDirection:"column",gap:space,alignItems:"left"!==align?(0,_utils_align_mjs__WEBPACK_IMPORTED_MODULE_2__.F)(align):void 0,textAlign:alignProp,...(0,_private_buildDataAttributes_mjs__WEBPACK_IMPORTED_MODULE_3__.a)({data,validateRestProps:restProps}),children})}},"./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/utils/align.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>alignToFlexAlign,g:()=>alignYToFlexAlign});var _css_atoms_sprinkles_css_mjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/css/atoms/sprinkles.css.mjs");const alignToFlexAlignLookup={left:"flexStart",center:"center",right:"flexEnd"},alignToFlexAlign=align=>align?(0,_css_atoms_sprinkles_css_mjs__WEBPACK_IMPORTED_MODULE_0__._u)(align,value=>alignToFlexAlignLookup[value]):void 0,alignYToFlexAlignLookup={top:"flexStart",center:"center",bottom:"flexEnd"},alignYToFlexAlign=alignY=>alignY?(0,_css_atoms_sprinkles_css_mjs__WEBPACK_IMPORTED_MODULE_0__._u)(alignY,value=>alignYToFlexAlignLookup[value]):void 0},"./src/components/CodeThemeProvider.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ScoobieDark:()=>ScoobieDark,ScoobieLight:()=>ScoobieLight,default:()=>__WEBPACK_DEFAULT_EXPORT__});var braid_design_system__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/braid-design-system@33.9.1_@types+react@18.3.23_babel-plugin-macros@3.1.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/braid-design-system/dist/lib/components/Stack/Stack.mjs"),_private_codeThemes__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/private/codeThemes.ts"),_CodeContainer__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/CodeContainer.tsx"),_CodeThemeProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/CodeThemeProvider.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");const codeSamples=[{language:"diff",code:"\n- Removed line\n+ Inserted line\n"},{language:"graphql",code:'\n# Inline arguments are only used to simplify these examples.\n# Parameterise your production queries as per advice above.\n\n# Correct: omit unused argument\nquery Omit {\n  events(schemeId: "seekAnzPublicTest") {\n    pageInfo {\n      hasNextPage\n    }\n  }\n}\n\n# Incorrect: set unused argument to null\nquery Null {\n  events(schemeId: "seekAnzPublicTest", after: null) {\n    pageInfo {\n      hasNextPage\n    }\n  }\n}\n\n# Incorrect: set unused argument to an empty string\nquery EmptyString {\n  events(schemeId: "seekAnzPublicTest", after: "") {\n    pageInfo {\n      hasNextPage\n    }\n  }\n}\n\n# Incorrect: create variable for unused argument\nquery Variable($after: String!) {\n  events(schemeId: "seekAnzPublicTest", after: $after) {\n    pageInfo {\n      hasNextPage\n    }\n  }\n}\n'},{language:"http",code:'\nPOST https://graphql.seek.com/graphql HTTP/1.1\n\nAccept-Language: en-AU\n\nAuthorization: Bearer PARTNER_TOKEN_HERE\n\nContent-Type: application/json\n\nUser-Agent: example-application/1.2.3\n\nX-Request-Id: a9e3d78d-576d-470b-b1d2-52f4921be25c\n\nX-Session-Id: b5a8774c-c450-4906-a25c-861bce129106\n\n{\n\n  "query": "{ version }"\n\n}\n'},{language:"json",code:'\n{\n  "hiringOrganization": {\n    "name": "Acme Corp"\n  }\n}\n'},{language:"bash",code:'\n#!/bin/sh\n\n# In practice, propagate language preferences from the end-user client.\n# https://developer.seek.com/graphql/in-practice#content-localisation\nacceptLanguage=\'en-AU\'\n\n# In practice, retrieve and cache an access token dynamically at runtime.\n# https://developer.seek.com/auth\naccessToken=\'\'\n\n# In practice, use your application name and version from configuration.\n# https://developer.seek.com/graphql/in-practice#tracing-requests\nuserAgent=\'example-application/1.2.3\'\n\n# In practice, share the session ID among requests in a given interaction.\n# https://developer.seek.com/graphql/in-practice#tracing-requests\nsessionId="$(uuidgen)"\n\n# In practice, be wary of code injection.\n# https://developer.seek.com/graphql/in-practice#variables\ndata=\'{"query": "{ version }"}\'\n\n# In practice, use a GraphQL client and something other than a Bash script.\n# https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n# https://graphql.org/community/tools-and-libraries/?tags=client\nresponse="$(\n  curl   --data "${data}"   --header "Accept-Language: ${acceptLanguage}"   --header "Authorization: Bearer ${accessToken}"   --header \'Content-Type: application/json\'   --header "User-Agent: ${userAgent}"   --header "X-Request-Id: $(uuidgen)"   --header "X-Session-Id: ${sessionId}"   --request POST   --silent   --write-out \'\n%{http_code}\'   \'https://graphql.seek.com/graphql\'\n)"\n\necho "${response}" | tail -n 1\n# 200\n\necho "${response}" | head -n 1\n# {"data":{"version":"abcdefa.12345"},"extensions":{"requestLatency":1}}\n'},{language:"csharp",code:'\nusing System.Net.Http.Headers;\nusing System.Text;\n\nclass Program\n{\n  static async Task Main()\n  {\n    // In practice, propagate language preferences from the end-user client.\n    // https://developer.seek.com/graphql/in-practice#content-localisation\n    var acceptLanguage = "en-AU";\n\n    // In practice, retrieve and cache an access token dynamically at runtime.\n    // https://developer.seek.com/auth\n    var accessToken = "";\n\n    // In practice, use your application name and version from configuration.\n    // https://developer.seek.com/graphql/in-practice#tracing-requests\n    var userAgent = "example-application/1.2.3";\n\n    // In practice, share the session ID among requests in a given interaction.\n    // https://developer.seek.com/graphql/in-practice#tracing-requests\n    var sessionId = Guid.NewGuid().ToString(); // V4 UUID\n\n    // In practice, use a GraphQL client.\n    // https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n    // https://graphql.org/community/tools-and-libraries/?tags=client_c-net\n    using (var httpClient = new HttpClient())\n    {\n      var request = new HttpRequestMessage(HttpMethod.Post, "https://graphql.seek.com/graphql");\n      request.Headers.AcceptLanguage.Add(new StringWithQualityHeaderValue(acceptLanguage));\n      request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);\n      request.Headers.UserAgent.ParseAdd(userAgent);\n      request.Headers.Add("X-Request-Id", Guid.NewGuid().ToString());\n      request.Headers.Add("X-Session-Id", sessionId);\n      // In practice, be wary of code injection.\n      // https://developer.seek.com/graphql/in-practice#variables\n      request.Content = new StringContent("{"query": "{ version }"}", Encoding.UTF8, "application/json");\n\n      var response = await httpClient.SendAsync(request);\n      var responseBody = await response.Content.ReadAsStringAsync();\n\n      Console.WriteLine((int)response.StatusCode);\n      // 200\n\n      Console.WriteLine(responseBody);\n      // {"data":{"version":"abcdefa.12345"},"extensions":{"requestLatency":1}}\n    }\n  }\n}\n'},{language:"java",code:'\nimport java.io.IOException;\nimport java.lang.InterruptedException;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.UUID;\n\nclass Main {\n  public static void main(String[] args) throws URISyntaxException, IOException, InterruptedException {\n    // In practice, propagate language preferences from the end-user client.\n    // https://developer.seek.com/graphql/in-practice#content-localisation\n    var acceptLanguage = "en-AU";\n\n    // In practice, retrieve and cache an access token dynamically at runtime.\n    // https://developer.seek.com/auth\n    var accessToken = "";\n\n    // In practice, use your application name and version from configuration.\n    // https://developer.seek.com/graphql/in-practice#tracing-requests\n    var userAgent = "example-application/1.2.3";\n\n    // In practice, share the session ID among requests in a given interaction.\n    // https://developer.seek.com/graphql/in-practice#tracing-requests\n    var sessionId = UUID.randomUUID();\n\n    // In practice, use a GraphQL client.\n    // https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n    // https://graphql.org/community/tools-and-libraries/?tags=client_java-kotlin-android\n    var client = HttpClient.newHttpClient();\n\n    var request = HttpRequest.newBuilder()\n      .uri(new URI("https://graphql.seek.com/graphql"))\n      .header("Accept-Language", acceptLanguage)\n      .header("Authorization", "Bearer " + accessToken)\n      .header("Content-Type", "application/json")\n      .header("User-Agent", userAgent)\n      .header("X-Request-Id", UUID.randomUUID().toString())\n      .header("X-Session-Id", sessionId.toString())\n      // In practice, be wary of code injection.\n      // https://developer.seek.com/graphql/in-practice#variables\n      .POST(HttpRequest.BodyPublishers.ofString("{"query": "{ version }"}"))\n      .build();\n\n    // In practice, use `sendAsync()`.\n    var response = client\n      .send(request, HttpResponse.BodyHandlers.ofString());\n\n    System.out.println(response.statusCode());\n    // 200\n\n    System.out.println(response.body());\n    // {"data":{"version":"abcdefa.12345"},"extensions":{"requestLatency":1}}\n  }\n}\n'},{language:"javascript",code:"\nimport { randomUUID } from 'node:crypto';\n\nconst a = (a, b) => a + b;\n\n// In practice, propagate language preferences from the end-user client.\n// https://developer.seek.com/graphql/in-practice#content-localisation\nconst acceptLanguage = 'en-AU';\n\n// In practice, retrieve and cache an access token dynamically at runtime.\n// https://developer.seek.com/auth\nconst accessToken = '';\n\n// In practice, use your application name and version from configuration.\n// https://developer.seek.com/graphql/in-practice#tracing-requests\nconst userAgent = 'example-application/1.2.3';\n\n// In practice, share the session ID among requests in a given interaction.\n// https://developer.seek.com/graphql/in-practice#tracing-requests\nconst sessionId = randomUUID();\n\n// In practice, use a GraphQL client.\n// https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n// https://graphql.org/community/tools-and-libraries/?tags=client_javascript\nconst response = await fetch('https://graphql.seek.com/graphql', {\n  // In practice, be wary of code injection.\n  // https://developer.seek.com/graphql/in-practice#variables\n  body: JSON.stringify({ query: '{ version }' }),\n  headers: {\n    'Accept-Language': acceptLanguage,\n    Authorization: `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n    'User-Agent': userAgent,\n    'X-Request-Id': randomUUID(),\n    'X-Session-Id': sessionId\n  },\n  method: 'POST'\n});\n\n// In practice, use `json()`.\nconst responseBody = await response.text();\n\nconsole.log(response.status);\n// 200\n\nconsole.log(responseBody);\n// {\"data\":{\"version\":\"abcdefa.12345\"},\"extensions\":{\"requestLatency\":1}}\n"},{language:"kotlin",code:'\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.util.UUID\n\nfun main() {\n  // In practice, propagate language preferences from the end-user client.\n  // https://developer.seek.com/graphql/in-practice#content-localisation\n  val acceptLanguage = "en-AU"\n\n  // In practice, retrieve and cache an access token dynamically at runtime.\n  // https://developer.seek.com/auth\n  val accessToken = ""\n\n  // In practice, use your application name and version from configuration.\n  // https://developer.seek.com/graphql/in-practice#tracing-requests\n  val userAgent = "example-application/1.2.3"\n\n  // In practice, share the session ID among requests in a given interaction.\n  // https://developer.seek.com/graphql/in-practice#tracing-requests\n  val sessionId = UUID.randomUUID().toString()\n\n  // In practice, use a GraphQL client.\n  // https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n  // https://graphql.org/community/tools-and-libraries/?tags=client_java-kotlin-android\n  val url = URL("https://graphql.seek.com/graphql")\n  val connection = url.openConnection() as HttpURLConnection\n  connection.setRequestMethod("POST")\n  connection.setRequestProperty("Accept-Language", acceptLanguage)\n  connection.setRequestProperty("Authorization", "Bearer $accessToken")\n  connection.setRequestProperty("Content-Type", "application/json")\n  connection.setRequestProperty("User-Agent", userAgent)\n  connection.setRequestProperty("X-Request-Id", UUID.randomUUID().toString())\n  connection.setRequestProperty("X-Session-Id", sessionId)\n  connection.setDoOutput(true)\n  // In practice, be wary of code injection.\n  // https://developer.seek.com/graphql/in-practice#variables\n  connection.outputStream.use { it.write("{"query":"{ version }"}".toByteArray())}\n\n  val responseBody = connection.inputStream.bufferedReader().use { it.readText() }\n\n  println(connection.responseCode)\n  // 200\n\n  println(responseBody)\n  // {"data":{"version":"abcdefa.12345"},"extensions":{"requestLatency":1}}\n}\n  '},{language:"python",code:"\nimport json\nimport urllib.request\nimport urllib.parse\nimport uuid\n\n# In practice, propagate language preferences from the end-user client.\n# https://developer.seek.com/graphql/in-practice#content-localisation\naccept_language = 'en-AU'\n\n# In practice, retrieve and cache an access token dynamically at runtime.\n# https://developer.seek.com/auth\naccess_token = ''\n\n# In practice, use your application name and version from configuration.\n# https://developer.seek.com/graphql/in-practice#tracing-requests\nuser_agent = 'example-application/1.2.3'\n\n# In practice, share the session ID among requests in a given interaction.\n# https://developer.seek.com/graphql/in-practice#tracing-requests\nsession_id = str(uuid.uuid4())\n\n# In practice, use a GraphQL client.\n# https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n# https://graphql.org/community/tools-and-libraries/?tags=client_python\nurl = 'https://graphql.seek.com/graphql'\nheaders = {\n  'Accept-Language': accept_language,\n  'Authorization': f'Bearer {access_token}',\n  'Content-Type': 'application/json',\n  'User-Agent': user_agent,\n  'X-Request-Id': str(uuid.uuid4()),\n  'X-Session-Id': session_id\n}\n# In practice, be wary of code injection.\n# https://developer.seek.com/graphql/in-practice#variables\ndata = json.dumps({\n  'query': '{ version }'\n}).encode('utf-8')\nrequest = urllib.request.Request(url, data, headers)\n\nwith urllib.request.urlopen(request) as response:\n  response_body = response.read().decode('utf-8')\n\nprint(response.status)\n# 200\n\nprint(response_body)\n# {\"data\":{\"version\":\"abcdefa.12345\"},\"extensions\":{\"requestLatency\":1}}\n  "},{language:"swift",code:'\nimport Foundation\nimport FoundationNetworking\n\n// In practice, propagate language preferences from the end-user client.\n// https://developer.seek.com/graphql/in-practice#content-localisation\nlet acceptLanguage = "en-AU"\n\n// In practice, retrieve and cache an access token dynamically at runtime.\n// https://developer.seek.com/auth\nlet accessToken = ""\n\n// In practice, use your application name and version from configuration.\n// https://developer.seek.com/graphql/in-practice#tracing-requests\nlet userAgent = "example-application/1.2.3"\n\n// In practice, share the session ID among requests in a given interaction.\n// https://developer.seek.com/graphql/in-practice#tracing-requests\nlet sessionId = UUID().uuidString\n\n// In practice, use a GraphQL client.\n// https://developer.seek.com/graphql/in-practice#client-libraries-and-tools\n// https://graphql.org/community/tools-and-libraries/?tags=client_swift-objective-c-ios\nlet url = URL(string: "https://graphql.seek.com/graphql")!\nvar request = URLRequest(url: url)\nrequest.httpMethod = "POST"\nrequest.addValue(acceptLanguage, forHTTPHeaderField: "Accept-Language")\nrequest.addValue("Bearer (accessToken)", forHTTPHeaderField: "Authorization")\nrequest.addValue("application/json", forHTTPHeaderField: "Content-Type")\nrequest.addValue(userAgent, forHTTPHeaderField: "User-Agent")\nrequest.addValue(UUID().uuidString, forHTTPHeaderField: "X-Request-Id")\nrequest.addValue(sessionId, forHTTPHeaderField: "X-Session-Id")\n// In practice, be wary of code injection.\n// https://developer.seek.com/graphql/in-practice#variables\nrequest.httpBody = try JSONSerialization.data(withJSONObject: ["query": "{ version }"])\n\n// In practice, properly handle concurrency and errors.\nlet semaphore = DispatchSemaphore(value: 0)\n\nlet task = URLSession.shared.dataTask(with: request) { (data, response, error) in\n  print((response as! HTTPURLResponse).statusCode)\n  // 200\n\n  print(String(data: data!, encoding: .utf8)!)\n  // {"data":{"version":"abcdefa.12345"},"extensions":{"requestLatency":1}}\n\n  semaphore.signal()\n}\n\ntask.resume()\n\nsemaphore.wait()\n  '}],__WEBPACK_DEFAULT_EXPORT__={title:"Standalone/CodeThemeProvider",component:_CodeThemeProvider__WEBPACK_IMPORTED_MODULE_1__.q,argTypes:{theme:{control:{type:"select"},options:Object.keys(_private_codeThemes__WEBPACK_IMPORTED_MODULE_2__.G)}}},children=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(braid_design_system__WEBPACK_IMPORTED_MODULE_3__.B,{space:"small",children:codeSamples.map(sample=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CodeContainer__WEBPACK_IMPORTED_MODULE_4__.n,{code:sample.code.trim(),language:sample.language,lineNumbers:!0},sample.language))}),ScoobieDark={globals:{colorMode:"darkMode"},args:{children,theme:"scoobieDark"},parameters:{loki:{skip:!0}}},ScoobieLight={globals:{colorMode:"lightMode"},args:{children,theme:"scoobieLight"}}}}]);